// <auto-generated />
using System;
using Gitec.GitecBulletin.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Gitec.Migrations
{
    [DbContext(typeof(GitecBulletinDbContext))]
    [Migration("20250317163216_redarrays")]
    partial class redarrays
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Gitec.GitecBulletin.Models.Board", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<int>("BoardType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DisplayScreenUid")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DisplayThemeUid")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScheduleUid")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.HasIndex("DisplayScreenUid");

                    b.HasIndex("DisplayThemeUid");

                    b.HasIndex("ScheduleUid");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.DisplayScreen", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("HostIp")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.ToTable("Displays");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.DisplayTheme", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccentColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("BgColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("FrameAccentColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FrameColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("ShowFrame")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TextColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.ToTable("DisplayThemes");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.Element", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("BoardUid")
                        .HasColumnType("TEXT");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduleUid")
                        .HasColumnType("TEXT");

                    b.Property<int>("SortOrder")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.HasIndex("BoardUid");

                    b.HasIndex("ScheduleUid");

                    b.ToTable("Elements");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.SchedulePackage", b =>
                {
                    b.Property<Guid>("Uid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("ActiveDays")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Uid");

                    b.ToTable("SchedulePackages");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.UtilityModels.DateRange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SchedulePackageUid")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchedulePackageUid");

                    b.ToTable("DateRange");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.UtilityModels.TimeWindow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("SchedulePackageUid")
                        .HasColumnType("TEXT");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("SchedulePackageUid");

                    b.ToTable("TimeWindow");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.Board", b =>
                {
                    b.HasOne("Gitec.GitecBulletin.Models.DisplayScreen", null)
                        .WithMany("Boards")
                        .HasForeignKey("DisplayScreenUid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gitec.GitecBulletin.Models.DisplayTheme", "DisplayTheme")
                        .WithMany()
                        .HasForeignKey("DisplayThemeUid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Gitec.GitecBulletin.Models.SchedulePackage", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleUid")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("DisplayTheme");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.Element", b =>
                {
                    b.HasOne("Gitec.GitecBulletin.Models.Board", null)
                        .WithMany("Elements")
                        .HasForeignKey("BoardUid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Gitec.GitecBulletin.Models.SchedulePackage", "Schedule")
                        .WithMany()
                        .HasForeignKey("ScheduleUid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.UtilityModels.DateRange", b =>
                {
                    b.HasOne("Gitec.GitecBulletin.Models.SchedulePackage", null)
                        .WithMany("DateRanges")
                        .HasForeignKey("SchedulePackageUid");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.UtilityModels.TimeWindow", b =>
                {
                    b.HasOne("Gitec.GitecBulletin.Models.SchedulePackage", null)
                        .WithMany("TimeWindows")
                        .HasForeignKey("SchedulePackageUid");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.Board", b =>
                {
                    b.Navigation("Elements");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.DisplayScreen", b =>
                {
                    b.Navigation("Boards");
                });

            modelBuilder.Entity("Gitec.GitecBulletin.Models.SchedulePackage", b =>
                {
                    b.Navigation("DateRanges");

                    b.Navigation("TimeWindows");
                });
#pragma warning restore 612, 618
        }
    }
}
